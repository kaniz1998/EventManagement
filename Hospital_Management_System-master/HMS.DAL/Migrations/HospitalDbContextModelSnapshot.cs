// <auto-generated />
using System;
using HMS.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HMS.DAL.Migrations
{
    [DbContext(typeof(HospitalDbContext))]
    partial class HospitalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HMS.Models.AdmissionBill", b =>
                {
                    b.Property<int>("AdmissionBillID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdmissionBillID"), 1L, 1);

                    b.Property<decimal>("AB_Subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("IndoorPatientID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("date");

                    b.HasKey("AdmissionBillID");

                    b.HasIndex("IndoorPatientID");

                    b.ToTable("AdmissionBills");
                });

            modelBuilder.Entity("HMS.Models.Advice", b =>
                {
                    b.Property<int>("AdviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdviceId"), 1L, 1);

                    b.Property<string>("AdviceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdviceId");

                    b.ToTable("Advices");

                    b.HasData(
                        new
                        {
                            AdviceId = 1,
                            AdviceName = "Eat Healthy"
                        },
                        new
                        {
                            AdviceId = 2,
                            AdviceName = "Exercise Regularly"
                        },
                        new
                        {
                            AdviceId = 3,
                            AdviceName = "Get Enough Sleep"
                        },
                        new
                        {
                            AdviceId = 4,
                            AdviceName = "Stay Hydrated"
                        },
                        new
                        {
                            AdviceId = 5,
                            AdviceName = "Manage Stress"
                        });
                });

            modelBuilder.Entity("HMS.Models.Ambulance", b =>
                {
                    b.Property<int>("AmbulanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AmbulanceID"), 1L, 1);

                    b.Property<string>("AmbulanceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Availability")
                        .HasColumnType("bit");

                    b.Property<string>("LastLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AmbulanceID");

                    b.ToTable("Ambulances", (string)null);
                });

            modelBuilder.Entity("HMS.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JsonData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("HMS.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("HMS.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentID"), 1L, 1);

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AppointmentStatus")
                        .HasColumnType("int");

                    b.Property<int>("AppointmentType")
                        .HasColumnType("int");

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.HasKey("AppointmentID");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("HMS.Models.Bed", b =>
                {
                    b.Property<int>("BedID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BedID"), 1L, 1);

                    b.Property<string>("BedNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOccupied")
                        .HasColumnType("bit");

                    b.Property<int?>("WardCabinID")
                        .HasColumnType("int");

                    b.HasKey("BedID");

                    b.HasIndex("WardCabinID");

                    b.ToTable("Beds");

                    b.HasData(
                        new
                        {
                            BedID = 1,
                            BedNumber = "W101",
                            IsOccupied = true,
                            WardCabinID = 1
                        },
                        new
                        {
                            BedID = 2,
                            BedNumber = "W102",
                            IsOccupied = true,
                            WardCabinID = 1
                        },
                        new
                        {
                            BedID = 3,
                            BedNumber = "W103",
                            IsOccupied = true,
                            WardCabinID = 1
                        },
                        new
                        {
                            BedID = 4,
                            BedNumber = "C101",
                            IsOccupied = true,
                            WardCabinID = 2
                        },
                        new
                        {
                            BedID = 5,
                            BedNumber = "C102",
                            IsOccupied = true,
                            WardCabinID = 2
                        });
                });

            modelBuilder.Entity("HMS.Models.Bill", b =>
                {
                    b.Property<int>("BillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillId"), 1L, 1);

                    b.Property<decimal>("BillAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("BillDate")
                        .HasColumnType("date");

                    b.Property<string>("BillingAddress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BillingNotes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("InsuranceInfo")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MedicineBill")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PatientIdentityNumber")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<string>("PreparedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PrescriptionNumber")
                        .HasColumnType("int");

                    b.Property<string>("TakenServiceBill")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestBill")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isInsurance")
                        .HasColumnType("bit");

                    b.HasKey("BillId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("HMS.Models.BloodBank", b =>
                {
                    b.Property<int>("BloodBankID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BloodBankID"), 1L, 1);

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DonorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("BloodBankID");

                    b.ToTable("BloodBanks");
                });

            modelBuilder.Entity("HMS.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"), 1L, 1);

                    b.Property<string>("DepartmentDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            DepartmentDescription = "It is concerned with disorders and diseases of the nervous system",
                            DepartmentName = "Neurology"
                        },
                        new
                        {
                            DepartmentId = 2,
                            DepartmentDescription = "The branch of medicine dealing with children and their diseases.",
                            DepartmentName = "Paediatrics"
                        });
                });

            modelBuilder.Entity("HMS.Models.DischargeTransfer", b =>
                {
                    b.Property<int>("DT_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DT_ID"), 1L, 1);

                    b.Property<DateTime>("DischargeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DischargeSummary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientID")
                        .HasColumnType("int");

                    b.HasKey("DT_ID");

                    b.ToTable("DischargeTransfers");
                });

            modelBuilder.Entity("HMS.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorID"), 1L, 1);

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("DoctorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Doctortype")
                        .HasColumnType("int");

                    b.Property<string>("Education_Info")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("date");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResignDate")
                        .HasColumnType("date");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("employeeStatus")
                        .HasColumnType("int");

                    b.HasKey("DoctorID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            DoctorID = 1,
                            DepartmentID = 1,
                            DoctorName = "Pipul Rahman",
                            Doctortype = 1,
                            Education_Info = "MD in Cardiology from DMC University",
                            Image = "doctor1.jpg",
                            JoinDate = new DateTime(2023, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = "01917123456",
                            Specialization = "Cardiologist",
                            employeeStatus = 1
                        },
                        new
                        {
                            DoctorID = 2,
                            DepartmentID = 2,
                            DoctorName = "Ass Pina",
                            Doctortype = 4,
                            Education_Info = "MD in Orthopedics from ABC University",
                            Image = "doctor2.jpg",
                            JoinDate = new DateTime(2023, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = "01517123456",
                            Specialization = "Orthopedic Surgeon",
                            employeeStatus = 1
                        });
                });

            modelBuilder.Entity("HMS.Models.Dosage", b =>
                {
                    b.Property<int>("DosageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DosageID"), 1L, 1);

                    b.Property<string>("DosageName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DosageID");

                    b.ToTable("Dosages");
                });

            modelBuilder.Entity("HMS.Models.Drawer", b =>
                {
                    b.Property<int>("DrawerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DrawerID"), 1L, 1);

                    b.Property<int>("DrawerCondition")
                        .HasColumnType("int");

                    b.Property<string>("DrawerNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOccupied")
                        .HasColumnType("bit");

                    b.Property<int>("MorgueID")
                        .HasColumnType("int");

                    b.HasKey("DrawerID");

                    b.HasIndex("MorgueID");

                    b.ToTable("Drawers");

                    b.HasData(
                        new
                        {
                            DrawerID = 1,
                            DrawerCondition = 1,
                            DrawerNo = "Drawer-001",
                            IsOccupied = false,
                            MorgueID = 1
                        },
                        new
                        {
                            DrawerID = 2,
                            DrawerCondition = 2,
                            DrawerNo = "Drawer-002",
                            IsOccupied = true,
                            MorgueID = 2
                        });
                });

            modelBuilder.Entity("HMS.Models.DrawerInfo", b =>
                {
                    b.Property<int>("DrawerInfoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DrawerInfoID"), 1L, 1);

                    b.Property<int>("DrawerID")
                        .HasColumnType("int");

                    b.Property<bool>("IsPatient")
                        .HasColumnType("bit");

                    b.Property<int?>("PatientID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReceivedDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<int?>("UnidentifiedDeadBodyID")
                        .HasColumnType("int");

                    b.HasKey("DrawerInfoID");

                    b.HasIndex("DrawerID");

                    b.HasIndex("PatientID");

                    b.HasIndex("UnidentifiedDeadBodyID");

                    b.ToTable("DrawersInfo");
                });

            modelBuilder.Entity("HMS.Models.IndoorPatient", b =>
                {
                    b.Property<int>("IndoorPatientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IndoorPatientID"), 1L, 1);

                    b.Property<DateTime>("AdmissionDate")
                        .HasColumnType("date");

                    b.Property<string>("AdmissionNotes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("BedID")
                        .HasColumnType("int");

                    b.Property<int?>("BloodType")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("EmergencyContact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsuranceInfo")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDead")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsTransferred")
                        .HasColumnType("bit");

                    b.Property<int?>("MedicalRecordsID")
                        .HasColumnType("int");

                    b.Property<string>("NIDnumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("ReferredBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("IndoorPatientID");

                    b.HasIndex("BedID");

                    b.ToTable("IndoorPatients");
                });

            modelBuilder.Entity("HMS.Models.LabTechnician", b =>
                {
                    b.Property<int>("TechnicianID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TechnicianID"), 1L, 1);

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("Education_Info")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("date");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResignDate")
                        .HasColumnType("date");

                    b.Property<string>("TechnicianName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TechnicianType")
                        .HasColumnType("int");

                    b.Property<int>("employeeStatus")
                        .HasColumnType("int");

                    b.HasKey("TechnicianID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("LabTechnicians");

                    b.HasData(
                        new
                        {
                            TechnicianID = 1,
                            DepartmentID = 1,
                            Education_Info = "Bachelor of Science in Medical Technology",
                            Image = "labtech1.jpg",
                            JoinDate = new DateTime(2023, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = "01617123456",
                            TechnicianName = "valsun choudhury",
                            TechnicianType = 1,
                            employeeStatus = 1
                        },
                        new
                        {
                            TechnicianID = 2,
                            DepartmentID = 2,
                            Education_Info = "Certified Laboratory Technician",
                            Image = "labtech2.jpg",
                            JoinDate = new DateTime(2023, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = "01917123456",
                            TechnicianName = "Robin mia",
                            TechnicianType = 2,
                            employeeStatus = 2
                        });
                });

            modelBuilder.Entity("HMS.Models.Manufacturer", b =>
                {
                    b.Property<int>("ManufacturerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManufacturerID"), 1L, 1);

                    b.Property<string>("ManufacturerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ManufacturerID");

                    b.ToTable("Manufacturers");

                    b.HasData(
                        new
                        {
                            ManufacturerID = 1,
                            ManufacturerName = "Square Pharmaceuticals Ltd "
                        },
                        new
                        {
                            ManufacturerID = 2,
                            ManufacturerName = "Incepta Pharmaceutical Ltd"
                        },
                        new
                        {
                            ManufacturerID = 3,
                            ManufacturerName = "Beximco Pharmaceuticals Ltd"
                        },
                        new
                        {
                            ManufacturerID = 4,
                            ManufacturerName = "Opsonin Pharma Ltd"
                        },
                        new
                        {
                            ManufacturerID = 5,
                            ManufacturerName = "Renata Ltd"
                        },
                        new
                        {
                            ManufacturerID = 6,
                            ManufacturerName = "Healthcare Pharmaceuticals Ltd"
                        },
                        new
                        {
                            ManufacturerID = 7,
                            ManufacturerName = "Radient Pharmaceuticals Ltd"
                        },
                        new
                        {
                            ManufacturerID = 8,
                            ManufacturerName = "Eskayef Pharmaceuticals Ltd"
                        },
                        new
                        {
                            ManufacturerID = 9,
                            ManufacturerName = "ACME Laboratories Ltd"
                        },
                        new
                        {
                            ManufacturerID = 10,
                            ManufacturerName = "Aristopharma Ltd"
                        });
                });

            modelBuilder.Entity("HMS.Models.MasterAdviceEntry", b =>
                {
                    b.Property<int>("MasterAdviceEntryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MasterAdviceEntryID"), 1L, 1);

                    b.Property<int>("AdviceId")
                        .HasColumnType("int");

                    b.Property<int>("PrescriptionID")
                        .HasColumnType("int");

                    b.HasKey("MasterAdviceEntryID");

                    b.HasIndex("AdviceId");

                    b.HasIndex("PrescriptionID");

                    b.ToTable("MasterAdviceEntry");
                });

            modelBuilder.Entity("HMS.Models.MasterDosageEntry", b =>
                {
                    b.Property<int>("MasterDosageEntryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MasterDosageEntryID"), 1L, 1);

                    b.Property<int>("DosageID")
                        .HasColumnType("int");

                    b.Property<int>("PrescriptionID")
                        .HasColumnType("int");

                    b.HasKey("MasterDosageEntryID");

                    b.HasIndex("DosageID");

                    b.HasIndex("PrescriptionID");

                    b.ToTable("MasterDosageEntry");
                });

            modelBuilder.Entity("HMS.Models.MasterMedicineEntry", b =>
                {
                    b.Property<int>("MasterMedicineEntryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MasterMedicineEntryID"), 1L, 1);

                    b.Property<bool>("IsPrescribed")
                        .HasColumnType("bit");

                    b.Property<int>("MedicineID")
                        .HasColumnType("int");

                    b.Property<int>("PrescriptionID")
                        .HasColumnType("int");

                    b.HasKey("MasterMedicineEntryID");

                    b.HasIndex("MedicineID");

                    b.HasIndex("PrescriptionID");

                    b.ToTable("MasterMedicineEntry");
                });

            modelBuilder.Entity("HMS.Models.MasterSymptomsEntry", b =>
                {
                    b.Property<int>("MasterSymptomsEntryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MasterSymptomsEntryID"), 1L, 1);

                    b.Property<int>("PrescriptionID")
                        .HasColumnType("int");

                    b.Property<int>("SymptomId")
                        .HasColumnType("int");

                    b.HasKey("MasterSymptomsEntryID");

                    b.HasIndex("PrescriptionID");

                    b.HasIndex("SymptomId");

                    b.ToTable("MasterSymptomsEntry");
                });

            modelBuilder.Entity("HMS.Models.MasterTestEntry", b =>
                {
                    b.Property<int>("MasterTestEntryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MasterTestEntryID"), 1L, 1);

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<int>("PrescriptionID")
                        .HasColumnType("int");

                    b.Property<int>("TestID")
                        .HasColumnType("int");

                    b.HasKey("MasterTestEntryID");

                    b.HasIndex("PrescriptionID");

                    b.HasIndex("TestID");

                    b.ToTable("MasterTestEntry");
                });

            modelBuilder.Entity("HMS.Models.MedicalRecords", b =>
                {
                    b.Property<int>("MedicalRecordsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicalRecordsID"), 1L, 1);

                    b.Property<string>("MedicalHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientID")
                        .HasColumnType("int");

                    b.Property<bool>("PatientType")
                        .HasColumnType("bit");

                    b.Property<int?>("PrescriptionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TestID")
                        .HasColumnType("int");

                    b.HasKey("MedicalRecordsID");

                    b.HasIndex("PrescriptionID");

                    b.HasIndex("TestID");

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("HMS.Models.Medicine", b =>
                {
                    b.Property<int>("MedicineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicineID"), 1L, 1);

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DosageForms")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ManufacturerID")
                        .HasColumnType("int");

                    b.Property<int>("MedicineGenericID")
                        .HasColumnType("int");

                    b.Property<string>("MedicineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicineType")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("SellPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicineID");

                    b.ToTable("Medicines");

                    b.HasData(
                        new
                        {
                            MedicineID = 1,
                            Discount = 50.00m,
                            DosageForms = 2,
                            ExpireDate = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufacturerID = 1,
                            MedicineGenericID = 1,
                            MedicineName = "Napa",
                            MedicineType = 1,
                            Quantity = 522,
                            SellPrice = 5612.00m,
                            Weight = "500mg"
                        },
                        new
                        {
                            MedicineID = 2,
                            Discount = 50.00m,
                            DosageForms = 2,
                            ExpireDate = new DateTime(2025, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufacturerID = 2,
                            MedicineGenericID = 2,
                            MedicineName = "Seclo",
                            MedicineType = 1,
                            Quantity = 522,
                            SellPrice = 5612.00m,
                            Weight = "20mg"
                        },
                        new
                        {
                            MedicineID = 3,
                            Discount = 50.00m,
                            DosageForms = 2,
                            ExpireDate = new DateTime(2025, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufacturerID = 2,
                            MedicineGenericID = 2,
                            MedicineName = "Napa Extra",
                            MedicineType = 1,
                            Quantity = 522,
                            SellPrice = 5612.00m,
                            Weight = "20mg"
                        });
                });

            modelBuilder.Entity("HMS.Models.MedicineBill", b =>
                {
                    b.Property<int>("MedicineBillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicineBillId"), 1L, 1);

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<int>("MedicineCount")
                        .HasColumnType("int");

                    b.Property<string>("MedicineName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("NetPrice")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("[MedicineCount]*[Price]");

                    b.Property<decimal?>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PrescriptionID")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("MedicineBillId");

                    b.ToTable("MedicineBills");
                });

            modelBuilder.Entity("HMS.Models.MedicineGeneric", b =>
                {
                    b.Property<int>("MedicineGenericID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicineGenericID"), 1L, 1);

                    b.Property<string>("MedicineGenericNames")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicineGenericID");

                    b.ToTable("MedicineGenerics");

                    b.HasData(
                        new
                        {
                            MedicineGenericID = 1,
                            MedicineGenericNames = "Atorvastatin"
                        },
                        new
                        {
                            MedicineGenericID = 2,
                            MedicineGenericNames = "Rosuvastatin"
                        },
                        new
                        {
                            MedicineGenericID = 3,
                            MedicineGenericNames = "Metformin Hydrochloride"
                        },
                        new
                        {
                            MedicineGenericID = 4,
                            MedicineGenericNames = "linagliptin & Metformin"
                        },
                        new
                        {
                            MedicineGenericID = 5,
                            MedicineGenericNames = "Olmisertan "
                        });
                });

            modelBuilder.Entity("HMS.Models.Morgue", b =>
                {
                    b.Property<int>("MorgueID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MorgueID"), 1L, 1);

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<bool>("IsolationCapability")
                        .HasColumnType("bit");

                    b.Property<string>("MorgueName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MorgueID");

                    b.ToTable("Morgues", (string)null);

                    b.HasData(
                        new
                        {
                            MorgueID = 1,
                            Capacity = 50,
                            IsolationCapability = true,
                            MorgueName = "Morgue-1"
                        },
                        new
                        {
                            MorgueID = 2,
                            Capacity = 100,
                            IsolationCapability = false,
                            MorgueName = "Morgue-2"
                        });
                });

            modelBuilder.Entity("HMS.Models.NumberGeneratorHelper.NumberCounterRecord", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("Counter")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("NumberCounterRecords");
                });

            modelBuilder.Entity("HMS.Models.Nurse", b =>
                {
                    b.Property<int>("NurseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NurseID"), 1L, 1);

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("Education_Info")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("date");

                    b.Property<int>("NurseLevel")
                        .HasColumnType("int");

                    b.Property<string>("NurseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NurseType")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResignDate")
                        .HasColumnType("date");

                    b.Property<int>("employeeStatus")
                        .HasColumnType("int");

                    b.HasKey("NurseID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Nurses");

                    b.HasData(
                        new
                        {
                            NurseID = 1,
                            DepartmentID = 1,
                            Education_Info = "Bachelor of Science in Nursing",
                            Image = "nurse1.jpg",
                            JoinDate = new DateTime(2023, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NurseLevel = 0,
                            NurseName = "Sharmin Jahan",
                            NurseType = 1,
                            PhoneNumber = "01317123456",
                            employeeStatus = 1
                        },
                        new
                        {
                            NurseID = 2,
                            DepartmentID = 2,
                            Education_Info = "Licensed Practical Nurse Certification",
                            Image = "nurse2.jpg",
                            JoinDate = new DateTime(2023, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NurseLevel = 0,
                            NurseName = "Hafsa khatun",
                            NurseType = 2,
                            PhoneNumber = "01817123456",
                            employeeStatus = 2
                        });
                });

            modelBuilder.Entity("HMS.Models.OtherEmployee", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeID"), 1L, 1);

                    b.Property<int?>("AmbulanceID")
                        .HasColumnType("int");

                    b.Property<string>("Education_Info")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("date");

                    b.Property<string>("OtherEmployeeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OtherEmployeeType")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResignDate")
                        .HasColumnType("date");

                    b.Property<int>("employeeStatus")
                        .HasColumnType("int");

                    b.HasKey("EmployeeID");

                    b.HasIndex("AmbulanceID");

                    b.ToTable("OtherEmployees");

                    b.HasData(
                        new
                        {
                            EmployeeID = 1,
                            Education_Info = "JSC",
                            Image = "wordboy1.jpg",
                            JoinDate = new DateTime(2023, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OtherEmployeeName = "abul mia",
                            OtherEmployeeType = 2,
                            PhoneNumber = "01917123456",
                            employeeStatus = 1
                        },
                        new
                        {
                            EmployeeID = 2,
                            Education_Info = "SSC",
                            Image = "driver1.jpg",
                            JoinDate = new DateTime(2023, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OtherEmployeeName = "ataur",
                            OtherEmployeeType = 6,
                            PhoneNumber = "01517123456",
                            employeeStatus = 2
                        });
                });

            modelBuilder.Entity("HMS.Models.Outdoor", b =>
                {
                    b.Property<int>("OutdoorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OutdoorID"), 1L, 1);

                    b.Property<bool>("IsAdmissionRequired")
                        .HasColumnType("bit");

                    b.Property<int?>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TreatmentDate")
                        .HasColumnType("date");

                    b.Property<int>("TreatmentType")
                        .HasColumnType("int");

                    b.HasKey("OutdoorID");

                    b.HasIndex("PatientID");

                    b.ToTable("Outdoors");
                });

            modelBuilder.Entity("HMS.Models.PatientRegister", b =>
                {
                    b.Property<int>("PatientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientID"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("PatientIdentityNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientID");

                    b.ToTable("PatientRegisters");

                    b.HasData(
                        new
                        {
                            PatientID = 1,
                            Address = "dhaka",
                            Email = "am@gmail.com",
                            Gender = 2,
                            PatientName = "Sultana begum",
                            PhoneNumber = "12345678"
                        },
                        new
                        {
                            PatientID = 2,
                            Address = "Sirajgonj",
                            Email = "az@gmail.com",
                            Gender = 1,
                            PatientName = "Azman Mollah",
                            PhoneNumber = "1233454"
                        });
                });

            modelBuilder.Entity("HMS.Models.PreoperativeDiagnosis", b =>
                {
                    b.Property<int>("PreoperativeDiagnosisID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PreoperativeDiagnosisID"), 1L, 1);

                    b.Property<string>("PreoperativeDiagnosisName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PreoperativeDiagnosisID");

                    b.ToTable("PreoperativeDiagnoses");

                    b.HasData(
                        new
                        {
                            PreoperativeDiagnosisID = 1,
                            PreoperativeDiagnosisName = "Hypertension"
                        },
                        new
                        {
                            PreoperativeDiagnosisID = 2,
                            PreoperativeDiagnosisName = "Diabetes"
                        },
                        new
                        {
                            PreoperativeDiagnosisID = 3,
                            PreoperativeDiagnosisName = "Obesity"
                        },
                        new
                        {
                            PreoperativeDiagnosisID = 4,
                            PreoperativeDiagnosisName = "Heart Disease"
                        },
                        new
                        {
                            PreoperativeDiagnosisID = 5,
                            PreoperativeDiagnosisName = "Kidney Disease"
                        });
                });

            modelBuilder.Entity("HMS.Models.Prescription", b =>
                {
                    b.Property<int>("PrescriptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionID"), 1L, 1);

                    b.Property<bool>("AdmissionSuggested")
                        .HasColumnType("bit");

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<string>("FollowUpInstructions")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("NextVisit")
                        .HasColumnType("date");

                    b.Property<int?>("PatientID")
                        .HasColumnType("int");

                    b.Property<int?>("PrescriptionBillID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PrescriptionDate")
                        .HasColumnType("date");

                    b.Property<string>("ProgressNotes")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("PrescriptionID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("PrescriptionBillID");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("HMS.Models.PrescriptionBill", b =>
                {
                    b.Property<int>("PrescriptionBillID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionBillID"), 1L, 1);

                    b.Property<decimal>("PB_Subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<int>("PatientRegistersPatientID")
                        .HasColumnType("int");

                    b.Property<int>("PrescriptionID")
                        .HasColumnType("int");

                    b.Property<int>("ServiceID")
                        .HasColumnType("int");

                    b.HasKey("PrescriptionBillID");

                    b.HasIndex("PatientRegistersPatientID");

                    b.ToTable("PrescriptionBills");
                });

            modelBuilder.Entity("HMS.Models.ReportDetail", b =>
                {
                    b.Property<int>("ReportDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportDetailID"), 1L, 1);

                    b.Property<string>("Reference_Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestID")
                        .HasColumnType("int");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReportDetailID");

                    b.HasIndex("TestID");

                    b.ToTable("ReportDetail");
                });

            modelBuilder.Entity("HMS.Models.Service", b =>
                {
                    b.Property<int>("ServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceID"), 1L, 1);

                    b.Property<decimal>("ServiceCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ServiceID");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            ServiceID = 1,
                            ServiceCharge = 500m,
                            ServiceName = "Bed charge"
                        },
                        new
                        {
                            ServiceID = 2,
                            ServiceCharge = 1500m,
                            ServiceName = "Cabin charge"
                        },
                        new
                        {
                            ServiceID = 3,
                            ServiceCharge = 3000m,
                            ServiceName = "ICU charge"
                        },
                        new
                        {
                            ServiceID = 4,
                            ServiceCharge = 120m,
                            ServiceName = "Oxygen charge (per liter)"
                        },
                        new
                        {
                            ServiceID = 5,
                            ServiceCharge = 200m,
                            ServiceName = "Food (per time)"
                        },
                        new
                        {
                            ServiceID = 6,
                            ServiceCharge = 100m,
                            ServiceName = "Wound Dressing"
                        },
                        new
                        {
                            ServiceID = 7,
                            ServiceCharge = 50m,
                            ServiceName = "Injection Pushing"
                        },
                        new
                        {
                            ServiceID = 8,
                            ServiceCharge = 500m,
                            ServiceName = "Outdoor Doctor Visit"
                        },
                        new
                        {
                            ServiceID = 9,
                            ServiceCharge = 800m,
                            ServiceName = "Indoor Doctor Visit (Assistant Professor)"
                        },
                        new
                        {
                            ServiceID = 10,
                            ServiceCharge = 1200m,
                            ServiceName = "Indoor Doctor Visit (Associate Professor)"
                        },
                        new
                        {
                            ServiceID = 11,
                            ServiceCharge = 1500m,
                            ServiceName = "Indoor Doctor Visit (Professor)"
                        },
                        new
                        {
                            ServiceID = 12,
                            ServiceCharge = 100m,
                            ServiceName = "Room Cleaning"
                        },
                        new
                        {
                            ServiceID = 13,
                            ServiceCharge = 50m,
                            ServiceName = "Patient Cleaning"
                        },
                        new
                        {
                            ServiceID = 14,
                            ServiceCharge = 300m,
                            ServiceName = "Physical Therapy"
                        },
                        new
                        {
                            ServiceID = 15,
                            ServiceCharge = 1000m,
                            ServiceName = "Ambulance charge"
                        },
                        new
                        {
                            ServiceID = 16,
                            ServiceCharge = 500m,
                            ServiceName = "Morgue charge"
                        },
                        new
                        {
                            ServiceID = 17,
                            ServiceCharge = 100m,
                            ServiceName = "Cloth Fee (Hospital Gown)"
                        },
                        new
                        {
                            ServiceID = 18,
                            ServiceCharge = 250m,
                            ServiceName = "Orthopedic Device charge (crutches, wheelchair)"
                        },
                        new
                        {
                            ServiceID = 19,
                            ServiceCharge = 200m,
                            ServiceName = "Pathological Sample Collection Fee (from Bed/Home)"
                        },
                        new
                        {
                            ServiceID = 20,
                            ServiceCharge = 400m,
                            ServiceName = "Counseling fee"
                        },
                        new
                        {
                            ServiceID = 21,
                            ServiceCharge = 400m,
                            ServiceName = "Rehabilitation fee"
                        },
                        new
                        {
                            ServiceID = 22,
                            ServiceCharge = 500m,
                            ServiceName = "Admission Charge"
                        });
                });

            modelBuilder.Entity("HMS.Models.Surgery", b =>
                {
                    b.Property<int>("SurgeryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SurgeryID"), 1L, 1);

                    b.Property<string>("Observations")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Postoperative_Diagnosis")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("PreoperativeDiagnosisID")
                        .HasColumnType("int");

                    b.Property<int>("PrescriptionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("SurgeryDate")
                        .HasColumnType("date");

                    b.Property<int>("SurgeryType")
                        .HasColumnType("int");

                    b.Property<int?>("TestID")
                        .HasColumnType("int");

                    b.HasKey("SurgeryID");

                    b.HasIndex("PreoperativeDiagnosisID");

                    b.HasIndex("PrescriptionID");

                    b.HasIndex("TestID");

                    b.ToTable("Surgeries");
                });

            modelBuilder.Entity("HMS.Models.Symptom", b =>
                {
                    b.Property<int>("SymptomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SymptomId"), 1L, 1);

                    b.Property<string>("SymptomName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SymptomId");

                    b.ToTable("Symptoms");

                    b.HasData(
                        new
                        {
                            SymptomId = 1,
                            SymptomName = "Fever"
                        },
                        new
                        {
                            SymptomId = 2,
                            SymptomName = "Cough"
                        },
                        new
                        {
                            SymptomId = 3,
                            SymptomName = "Headache"
                        },
                        new
                        {
                            SymptomId = 4,
                            SymptomName = "Sore Throat"
                        });
                });

            modelBuilder.Entity("HMS.Models.TakenService", b =>
                {
                    b.Property<int>("TakenServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TakenServiceId"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<decimal?>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TakenServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TakenServiceId");

                    b.ToTable("TakenService");
                });

            modelBuilder.Entity("HMS.Models.Test", b =>
                {
                    b.Property<int>("TestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestID"), 1L, 1);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TestID");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("HMS.Models.TestBill", b =>
                {
                    b.Property<int>("TestBillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestBillId"), 1L, 1);

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<decimal?>("PaidAmount")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PrescriptionID")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TestBillName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TestBillId");

                    b.ToTable("TestBills");
                });

            modelBuilder.Entity("HMS.Models.TestReport", b =>
                {
                    b.Property<int>("TestReportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestReportID"), 1L, 1);

                    b.Property<int>("PrescriptionID")
                        .HasColumnType("int");

                    b.Property<int>("ReportDetailID")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("TestReportID");

                    b.HasIndex("PrescriptionID");

                    b.HasIndex("ReportDetailID");

                    b.ToTable("TestReports");
                });

            modelBuilder.Entity("HMS.Models.Ticket", b =>
                {
                    b.Property<int>("TicketID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketID"), 1L, 1);

                    b.Property<DateTime?>("TicketDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TicketNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TicketID");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("HMS.Models.UnidentifiedDeadBody", b =>
                {
                    b.Property<int>("UnIdenfiedDeadBodyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnIdenfiedDeadBodyID"), 1L, 1);

                    b.Property<string>("CauseOfDeath")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("DateOfDeath")
                        .HasColumnType("date");

                    b.Property<string>("DeceasedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TagNumber")
                        .HasColumnType("int");

                    b.HasKey("UnIdenfiedDeadBodyID");

                    b.ToTable("unidentifiedDeadBodies");
                });

            modelBuilder.Entity("HMS.Models.WardCabin", b =>
                {
                    b.Property<int>("WardID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WardID"), 1L, 1);

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("WardCabinName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("WardCabinType")
                        .HasColumnType("int");

                    b.HasKey("WardID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("WardCabins");

                    b.HasData(
                        new
                        {
                            WardID = 1,
                            DepartmentID = 1,
                            WardCabinName = "Neuro Care",
                            WardCabinType = 0
                        },
                        new
                        {
                            WardID = 2,
                            DepartmentID = 2,
                            WardCabinName = "Child Care",
                            WardCabinType = 0
                        });
                });

            modelBuilder.Entity("HMS.Models.WasteManagement", b =>
                {
                    b.Property<int>("WasteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WasteID"), 1L, 1);

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DisposalDate")
                        .HasColumnType("date");

                    b.Property<string>("DisposalMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NextScheduleDate")
                        .HasColumnType("date");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("WasteType")
                        .HasColumnType("int");

                    b.HasKey("WasteID");

                    b.ToTable("WasteManagements");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HMS.Models.AdmissionBill", b =>
                {
                    b.HasOne("HMS.Models.IndoorPatient", "IndoorPatient")
                        .WithMany()
                        .HasForeignKey("IndoorPatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IndoorPatient");
                });

            modelBuilder.Entity("HMS.Models.Bed", b =>
                {
                    b.HasOne("HMS.Models.WardCabin", "WardCabin")
                        .WithMany("Beds")
                        .HasForeignKey("WardCabinID");

                    b.Navigation("WardCabin");
                });

            modelBuilder.Entity("HMS.Models.Doctor", b =>
                {
                    b.HasOne("HMS.Models.Department", null)
                        .WithMany("Doctors")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HMS.Models.Drawer", b =>
                {
                    b.HasOne("HMS.Models.Morgue", "Morgue")
                        .WithMany("Drawers")
                        .HasForeignKey("MorgueID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Morgue");
                });

            modelBuilder.Entity("HMS.Models.DrawerInfo", b =>
                {
                    b.HasOne("HMS.Models.Drawer", "Drawer")
                        .WithMany()
                        .HasForeignKey("DrawerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Models.PatientRegister", "PatientRegister")
                        .WithMany()
                        .HasForeignKey("PatientID");

                    b.HasOne("HMS.Models.UnidentifiedDeadBody", "UnidentifiedDeadBody")
                        .WithMany()
                        .HasForeignKey("UnidentifiedDeadBodyID");

                    b.Navigation("Drawer");

                    b.Navigation("PatientRegister");

                    b.Navigation("UnidentifiedDeadBody");
                });

            modelBuilder.Entity("HMS.Models.IndoorPatient", b =>
                {
                    b.HasOne("HMS.Models.Bed", null)
                        .WithMany("IndoorPatients")
                        .HasForeignKey("BedID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HMS.Models.LabTechnician", b =>
                {
                    b.HasOne("HMS.Models.Department", "Departments")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departments");
                });

            modelBuilder.Entity("HMS.Models.MasterAdviceEntry", b =>
                {
                    b.HasOne("HMS.Models.Advice", "Advice")
                        .WithMany("MasterAdviceEntries")
                        .HasForeignKey("AdviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Models.Prescription", "Prescription")
                        .WithMany("MasterAdviceEntries")
                        .HasForeignKey("PrescriptionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advice");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("HMS.Models.MasterDosageEntry", b =>
                {
                    b.HasOne("HMS.Models.Dosage", "Dosage")
                        .WithMany("MasterDosageEntries")
                        .HasForeignKey("DosageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Models.Prescription", "Prescription")
                        .WithMany("MasterDosageEntries")
                        .HasForeignKey("PrescriptionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dosage");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("HMS.Models.MasterMedicineEntry", b =>
                {
                    b.HasOne("HMS.Models.Medicine", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Models.Prescription", "Prescription")
                        .WithMany("MasterMedicineEntries")
                        .HasForeignKey("PrescriptionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("HMS.Models.MasterSymptomsEntry", b =>
                {
                    b.HasOne("HMS.Models.Prescription", "Prescription")
                        .WithMany("masterSymptomsEntries")
                        .HasForeignKey("PrescriptionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Models.Symptom", "Symptom")
                        .WithMany("masterSymptomsEntries")
                        .HasForeignKey("SymptomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prescription");

                    b.Navigation("Symptom");
                });

            modelBuilder.Entity("HMS.Models.MasterTestEntry", b =>
                {
                    b.HasOne("HMS.Models.Prescription", "Prescription")
                        .WithMany("masterTestEntries")
                        .HasForeignKey("PrescriptionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Models.Test", "Test")
                        .WithMany("masterTestEntries")
                        .HasForeignKey("TestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prescription");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("HMS.Models.MedicalRecords", b =>
                {
                    b.HasOne("HMS.Models.Prescription", null)
                        .WithMany("MedicalRecords")
                        .HasForeignKey("PrescriptionID");

                    b.HasOne("HMS.Models.Test", null)
                        .WithMany("MedicalRecords")
                        .HasForeignKey("TestID");
                });

            modelBuilder.Entity("HMS.Models.Nurse", b =>
                {
                    b.HasOne("HMS.Models.Department", null)
                        .WithMany("Nurses")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HMS.Models.OtherEmployee", b =>
                {
                    b.HasOne("HMS.Models.Ambulance", null)
                        .WithMany("OtherEmployees")
                        .HasForeignKey("AmbulanceID");
                });

            modelBuilder.Entity("HMS.Models.Outdoor", b =>
                {
                    b.HasOne("HMS.Models.PatientRegister", "PatientRegister")
                        .WithMany()
                        .HasForeignKey("PatientID");

                    b.Navigation("PatientRegister");
                });

            modelBuilder.Entity("HMS.Models.Prescription", b =>
                {
                    b.HasOne("HMS.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Models.PrescriptionBill", null)
                        .WithMany("Prescriptions")
                        .HasForeignKey("PrescriptionBillID");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HMS.Models.PrescriptionBill", b =>
                {
                    b.HasOne("HMS.Models.PatientRegister", "PatientRegisters")
                        .WithMany()
                        .HasForeignKey("PatientRegistersPatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientRegisters");
                });

            modelBuilder.Entity("HMS.Models.ReportDetail", b =>
                {
                    b.HasOne("HMS.Models.Test", "Test")
                        .WithMany("ReportDetails")
                        .HasForeignKey("TestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("HMS.Models.Surgery", b =>
                {
                    b.HasOne("HMS.Models.PreoperativeDiagnosis", null)
                        .WithMany("Surgeries")
                        .HasForeignKey("PreoperativeDiagnosisID");

                    b.HasOne("HMS.Models.Prescription", "Prescriptions")
                        .WithMany("Surgeries")
                        .HasForeignKey("PrescriptionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Models.Test", null)
                        .WithMany("Surgeries")
                        .HasForeignKey("TestID");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("HMS.Models.TestReport", b =>
                {
                    b.HasOne("HMS.Models.Prescription", "Prescriptions")
                        .WithMany("TestReports")
                        .HasForeignKey("PrescriptionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Models.ReportDetail", "ReportDetail")
                        .WithMany("TestReports")
                        .HasForeignKey("ReportDetailID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prescriptions");

                    b.Navigation("ReportDetail");
                });

            modelBuilder.Entity("HMS.Models.WardCabin", b =>
                {
                    b.HasOne("HMS.Models.Department", "Departments")
                        .WithMany("WardCabins")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departments");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("HMS.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HMS.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HMS.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("HMS.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HMS.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HMS.Models.Advice", b =>
                {
                    b.Navigation("MasterAdviceEntries");
                });

            modelBuilder.Entity("HMS.Models.Ambulance", b =>
                {
                    b.Navigation("OtherEmployees");
                });

            modelBuilder.Entity("HMS.Models.Bed", b =>
                {
                    b.Navigation("IndoorPatients");
                });

            modelBuilder.Entity("HMS.Models.Department", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Nurses");

                    b.Navigation("WardCabins");
                });

            modelBuilder.Entity("HMS.Models.Dosage", b =>
                {
                    b.Navigation("MasterDosageEntries");
                });

            modelBuilder.Entity("HMS.Models.Morgue", b =>
                {
                    b.Navigation("Drawers");
                });

            modelBuilder.Entity("HMS.Models.PreoperativeDiagnosis", b =>
                {
                    b.Navigation("Surgeries");
                });

            modelBuilder.Entity("HMS.Models.Prescription", b =>
                {
                    b.Navigation("MasterAdviceEntries");

                    b.Navigation("MasterDosageEntries");

                    b.Navigation("MasterMedicineEntries");

                    b.Navigation("MedicalRecords");

                    b.Navigation("Surgeries");

                    b.Navigation("TestReports");

                    b.Navigation("masterSymptomsEntries");

                    b.Navigation("masterTestEntries");
                });

            modelBuilder.Entity("HMS.Models.PrescriptionBill", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("HMS.Models.ReportDetail", b =>
                {
                    b.Navigation("TestReports");
                });

            modelBuilder.Entity("HMS.Models.Symptom", b =>
                {
                    b.Navigation("masterSymptomsEntries");
                });

            modelBuilder.Entity("HMS.Models.Test", b =>
                {
                    b.Navigation("MedicalRecords");

                    b.Navigation("ReportDetails");

                    b.Navigation("Surgeries");

                    b.Navigation("masterTestEntries");
                });

            modelBuilder.Entity("HMS.Models.WardCabin", b =>
                {
                    b.Navigation("Beds");
                });
#pragma warning restore 612, 618
        }
    }
}
